========================
Bool Literals
========================
    
val _ = true
val _ = false

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (bool_literal)))
  (operator_definition
    (identifier)
    (expr
      (bool_literal))))

========================
Integer Literals
========================
    
val _ = 0 
val _ = 340282366920938
val _ = 123_456_789

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (int_literal)))
  (operator_definition
    (identifier)
    (expr
      (int_literal)))
  (operator_definition
    (identifier)
    (expr
      (int_literal))))

===========================
Hexadecimal Integer Literal
===========================
    
val _ = 0xabcdef
val _ = 0xAbCdEf
val _ = 0xAB_CD_EF

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (int_literal)))
  (operator_definition
    (identifier)
    (expr
      (int_literal)))
  (operator_definition
    (identifier)
    (expr
      (int_literal))))

===========================
Lambda Expressions
===========================
    
val f = _ => 42
val g = (a) => a
val h = (a,b,c) => c

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (lambda_expr
        (identifier)
        (expr
          (int_literal)))))
  (operator_definition
    (identifier)
    (expr
      (lambda_expr
        (expr
          (identifier))
        (expr
          (identifier)))))
  (operator_definition
    (identifier)
    (expr
      (lambda_expr
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (identifier))))))

====================================
Operator Applications (Normal Form)
====================================
          
val _ = f()
val _ = f(e_1, e_2, e_3)

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (operator_application
        (identifier))))
  (operator_definition
    (identifier)
    (expr
      (operator_application
        (identifier)
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (identifier))))))

=========================================
Operator Applications (UFCS)
=========================================
          
val _ = e_1.f()
val _ = e_1.f(e_2, e_3)
val _ = e_1.f(e_2).g(e_3)

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (binary_expr
        (expr
          (identifier))
        (operator_application
          (identifier)))))
  (operator_definition
    (identifier)
    (expr
      (binary_expr
        (expr
          (identifier))
        (operator_application
          (identifier)
          (expr
            (identifier))
          (expr
            (identifier))))))
  (operator_definition
    (identifier)
    (expr
      (binary_expr
        (expr
          (binary_expr
            (expr
              (identifier))
            (operator_application
              (identifier)
              (expr
                (identifier)))))
        (operator_application
          (identifier)
          (expr
            (identifier)))))))

=========================================
List Access via Index
=========================================
          
val _ = list[3]
val _ = -list[3]
val _ = list[i+1]
val _ = grid[4][3]

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (list_access
        (expr
          (identifier))
        (expr
          (int_literal)))))
  (operator_definition
    (identifier)
    (expr
      (unary_expr
        (expr
          (list_access
            (expr
              (identifier))
            (expr
              (int_literal)))))))
  (operator_definition
    (identifier)
    (expr
      (list_access
        (expr
          (identifier))
        (expr
          (binary_expr
            (expr
              (identifier))
            (expr
              (int_literal)))))))
  (operator_definition
    (identifier)
    (expr
      (list_access
        (expr
          (list_access
            (expr
              (identifier))
            (expr
              (int_literal))))
        (expr
          (int_literal))))))

=========================================
Braced And/Or
=========================================
          
action _ = {
  and {
    a_1,
    or {
      a_2,  
      a_3, // <-- optional comma
    },
    a_4
  }
}

---
          
(source_file
  (operator_definition
    (identifier)
    (expr
      (expr
        (braced_and
          (expr
            (identifier))
          (expr
            (braced_or
              (expr
                (identifier))
              (expr
                (identifier))
              (comment)))
          (expr
            (identifier)))))))

========================
If-Else Condition
========================

val _ = if (p) e1 else e2
val _ = 
  if (p)
    e1 
  else if (p2)
    e2
  else
    e3
 
---

(source_file
  (operator_definition
    (identifier)
    (expr
      (if_else_condition
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (identifier)))))
  (operator_definition
    (identifier)
    (expr
      (if_else_condition
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (if_else_condition
            (expr
              (identifier))
            (expr
              (identifier))
            (expr
              (identifier))))))))

========================
Non-Deterministic Choice
========================

action _ = {
  nondet i1 = e1
  nondet i2 = e2
  e3
}
 
---

(source_file
  (operator_definition
    (identifier)
    (expr
      (expr
        (nondet_choice
          (identifier)
          (expr
            (identifier))
          (expr
            (nondet_choice
              (identifier)
              (expr
                (identifier))
              (expr
                (identifier)))))))))

===========================
Map Constructor
===========================

val _ = Map(k_1 -> v_1, k_2 -> v_2, k_3 -> v_3)

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (operator_application
        (identifier)
        (expr
          (binary_expr
            (expr
              (identifier))
            (expr
              (identifier))))
        (expr
          (binary_expr
            (expr
              (identifier))
            (expr
              (identifier))))
        (expr
          (binary_expr
            (expr
              (identifier))
            (expr
              (identifier))))))))

============================
Record Constructor
============================

val _ = { f_1: e_1, f_2: e_2, f_3: e_3 }

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (record_literal
        (identifier)
        (expr
          (identifier))
        (identifier)
        (expr
          (identifier))
        (identifier)
        (expr
          (identifier))))))

============================
Record Spread
============================

val r = { f_2: e_2, f_3: e_3 }
val _ = { f_1: e_1, ...r }

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (record_literal
        (identifier)
        (expr
          (identifier))
        (identifier)
        (expr
          (identifier)))))
  (operator_definition
    (identifier)
    (expr
      (record_literal
        (identifier)
        (expr
          (identifier))
        (identifier)))))

============================
Convert Set of Pairs to Map
============================

val _ = Set((1, true), (2, false)).setToMap()

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (binary_expr
        (expr
          (operator_application
            (identifier)
            (expr
              (tuple_literal
                (expr
                  (int_literal))
                (expr
                  (bool_literal))))
            (expr
              (tuple_literal
                (expr
                  (int_literal))
                (expr
                  (bool_literal))))))
        (operator_application
          (identifier))))))

============================
Tuple Constructor
============================

val _ = ()
val _ = (e_1)
val _ = (e_1, e_2, e_3)

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (tuple_literal)))
  (operator_definition
    (identifier)
    (expr
      (tuple_literal
        (expr
          (identifier)))))
  (operator_definition
    (identifier)
    (expr
      (tuple_literal
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (identifier))))))

============================
Match Expression
============================

val _ = 
  match L_k(x) {
    | L_1(x_1) => e_1
    | L_2(x_2) => e_2
    | L_3(x_3) => e_3
  }

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (match_expr
        (expr
          (operator_application
            (identifier)
            (expr
              (identifier))))
        (identifier)
        (expr
          (identifier))
        (expr
          (identifier))
        (identifier)
        (expr
          (identifier))
        (expr
          (identifier))
        (identifier)
        (expr
          (identifier))
        (expr
          (identifier))))))

============================
List Constructor
============================

val _ = []
val _ = [e_1]
val _ = [e_1, e_2, e_3]

---

(source_file
  (operator_definition
    (identifier)
    (expr
      (list_literal)))
  (operator_definition
    (identifier)
    (expr
      (list_literal
        (expr
          (identifier)))))
  (operator_definition
    (identifier)
    (expr
      (list_literal
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (identifier))))))


